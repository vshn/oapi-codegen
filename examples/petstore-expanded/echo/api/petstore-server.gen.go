// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------
	if paramValue := ctx.QueryParam("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"99t/BQAA//8F3U+JLRIAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
